{{- if and .Values.zabbixServer.enabled .Values.zabbixServer.zabbixServerHA.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zabbix.fullname" . }}-waitdbschema-script
  labels:
    app: {{ template "zabbix.fullname" . }}-waitdbschema-script
    app.kubernetes.io/name: waitdbschema-script
    helm.sh/chart: {{ include "zabbix.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}-waitdbschema-script
    app.kubernetes.io/managed-by: {{ .Release.Service }}-waitdbschema-script
data:
  wait_db_schema.sh: |
    #!/bin/bash

    set -o pipefail

    set +e

    # Script trace mode
    if [ "${DEBUG_MODE,,}" == "true" ]; then
        set -o xtrace
    fi

    # Default directories
    # User 'zabbix' home directory
    ZABBIX_USER_HOME_DIR="/var/lib/zabbix"
    # Configuration files directory
    ZABBIX_ETC_DIR="/etc/zabbix"

    # usage: file_env VAR [DEFAULT]
    # as example: file_env 'MYSQL_PASSWORD' 'zabbix'
    #    (will allow for "$MYSQL_PASSWORD_FILE" to fill in the value of "$MYSQL_PASSWORD" from a file)
    # unsets the VAR_FILE afterwards and just leaving VAR
    file_env() {
        local var="$1"
        local fileVar="${var}_FILE"
        local defaultValue="${2:-}"

        if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
            echo "**** Both variables $var and $fileVar are set (but are exclusive)"
            exit 1
        fi

        local val="$defaultValue"

        if [ "${!var:-}" ]; then
            val="${!var}"
            echo "** Using ${var} variable from ENV"
        elif [ "${!fileVar:-}" ]; then
            if [ ! -f "${!fileVar}" ]; then
                echo "**** Secret file \"${!fileVar}\" is not found"
                exit 1
            fi
            val="$(< "${!fileVar}")"
            echo "** Using ${var} variable from secret file"
        fi
        export "$var"="$val"
        unset "$fileVar"
    }

    # Check prerequisites for PostgreSQL database
    check_variables_postgresql() {
        file_env POSTGRES_USER
        file_env POSTGRES_PASSWORD

        : ${DB_SERVER_HOST:="postgres-server"}
        : ${DB_SERVER_PORT:="5432"}

        DB_SERVER_ROOT_USER=${POSTGRES_USER:-"postgres"}
        DB_SERVER_ROOT_PASS=${POSTGRES_PASSWORD:-""}

        DB_SERVER_ZBX_USER=${POSTGRES_USER:-"zabbix"}
        DB_SERVER_ZBX_PASS=${POSTGRES_PASSWORD:-"zabbix"}

        : ${DB_SERVER_SCHEMA:="public"}

        DB_SERVER_DBNAME=${POSTGRES_DB:-"zabbix"}
    }

    check_db_connect_postgresql() {
        echo "********************"
        echo "* DB_SERVER_HOST: ${DB_SERVER_HOST}"
        echo "* DB_SERVER_PORT: ${DB_SERVER_PORT}"
        echo "* DB_SERVER_DBNAME: ${DB_SERVER_DBNAME}"
        echo "* DB_SERVER_SCHEMA: ${DB_SERVER_SCHEMA}"
        if [ "${DEBUG_MODE,,}" == "true" ]; then
            echo "* DB_SERVER_ZBX_USER: ${DB_SERVER_ZBX_USER}"
            echo "* DB_SERVER_ZBX_PASS: ${DB_SERVER_ZBX_PASS}"
        fi
        echo "********************"

        if [ -n "${DB_SERVER_ZBX_PASS}" ]; then
            export PGPASSWORD="${DB_SERVER_ZBX_PASS}"
        fi

        WAIT_TIMEOUT=5

        if [ -n "${DB_SERVER_SCHEMA}" ]; then
            PGOPTIONS="--search_path=${DB_SERVER_SCHEMA}"
            export PGOPTIONS
        fi

        while true :
        do
            psql --host ${DB_SERVER_HOST} --port ${DB_SERVER_PORT} --username ${DB_SERVER_ROOT_USER} --list --quiet 1>/dev/null 2>&1 && break
            psql --host ${DB_SERVER_HOST} --port ${DB_SERVER_PORT} --username ${DB_SERVER_ROOT_USER} --list --dbname ${DB_SERVER_DBNAME} --quiet 1>/dev/null 2>&1 && break

            echo "**** PostgreSQL server is not available. Waiting $WAIT_TIMEOUT seconds..."
            sleep $WAIT_TIMEOUT
        done

        unset PGPASSWORD
        unset PGOPTIONS
    }

    psql_query() {
        query=$1
        db=$2

        local result=""

        if [ -n "${DB_SERVER_ZBX_PASS}" ]; then
            export PGPASSWORD="${DB_SERVER_ZBX_PASS}"
        fi

        if [ -n "${DB_SERVER_SCHEMA}" ]; then
            PGOPTIONS="--search_path=${DB_SERVER_SCHEMA}"
            export PGOPTIONS
        fi

        result=$(psql --no-align --quiet --tuples-only --host "${DB_SERVER_HOST}" --port "${DB_SERVER_PORT}" \
                --username "${DB_SERVER_ROOT_USER}" --command "$query" --dbname "$db" 2>/dev/null);

        unset PGPASSWORD
        unset PGOPTIONS

        echo $result
    }

    check_db_schema_present() {
        WAIT_TIMEOUT=5
        while true :
        do
            DBVERSION_TABLE_EXISTS=$(psql_query "SELECT 1 FROM pg_catalog.pg_class c JOIN pg_catalog.pg_namespace n ON n.oid = 
                c.relnamespace WHERE  n.nspname = '$DB_SERVER_SCHEMA' AND c.relname = 'dbversion'" "${DB_SERVER_DBNAME}")

            if [ -n "${DBVERSION_TABLE_EXISTS}" ]; then
                echo "** Table '${DB_SERVER_DBNAME}.dbversion' exists."
                ZBX_DB_VERSION=$(psql_query "SELECT mandatory FROM ${DB_SERVER_SCHEMA}.dbversion" "${DB_SERVER_DBNAME}")
            fi

            if [ -n "${ZBX_DB_VERSION}" ]; then
                echo "** dbversion is ${ZBX_DB_VERSION}, continuing with next step of checks..."
                break
            fi

            echo "**** DB Version not found yet, assuming DB schema is not yet created. Waiting $WAIT_TIMEOUT seconds..."
            sleep $WAIT_TIMEOUT
        done
    }

    check_db_schema() {
        WAIT_TIMEOUT=5
        while true :
        do
            # first, check whether the schema has a "dbversion" table
            DBVERSION_TABLE_EXISTS=$(psql_query "SELECT 1 FROM pg_catalog.pg_class c JOIN pg_catalog.pg_namespace n ON n.oid = 
                c.relnamespace WHERE  n.nspname = '$DB_SERVER_SCHEMA' AND c.relname = 'dbversion'" "${DB_SERVER_DBNAME}")

            # checks the string for nonzero length
            if [ -n "${DBVERSION_TABLE_EXISTS}" ]; then
                echo "** Table '${DB_SERVER_DBNAME}.dbversion' exists, now checking version"
                ZBX_DB_VERSION=$(psql_query "SELECT mandatory FROM ${DB_SERVER_SCHEMA}.dbversion" "${DB_SERVER_DBNAME}")
            fi

            if [ -n "${ZBX_DB_VERSION}" ]; then
                ZBX_DB_VERSION_MAJOR=${ZBX_DB_VERSION:0:4}
                ZBX_SRV_VERSION_MAJOR=$(/usr/sbin/zabbix_server --version | head -n 1 | sed -E 's/.* ([0-9]+)\.([0-9]+)\..*/\10\20/')
                echo "** db major version is ${ZBX_DB_VERSION_MAJOR}, zabbix version is ${ZBX_SRV_VERSION_MAJOR}"
                if [ ${ZBX_SRV_VERSION_MAJOR} -eq ${ZBX_DB_VERSION_MAJOR} ]; then
                    echo "** schema is the appropriate version, continuing checks"

                    DB_AMOUNT_USERS=$(psql_query "SELECT count(*) FROM ${DB_SERVER_SCHEMA}.users" "${DB_SERVER_DBNAME}")
                    if [ ${DB_AMOUNT_USERS} -gt 0 ]; then
                        echo "** amount of users in users table is ${DB_AMOUNT_USERS}, letting the Zabbix Server container start"
                        break
                    else
                        echo "** still no users in users table, assuming db schema initialization is still running"
                    fi
                else
                    echo "** schema version is different. Waiting for a major release upgrade? Not starting!"
                fi
            else
                echo "** DB Version not found yet, assuming DB schema is not yet created"
            fi

            echo "*** Waiting $WAIT_TIMEOUT seconds..."
            sleep $WAIT_TIMEOUT
        done
    }

    wait_for_db_and_schema() {
        echo "** waiting for Zabbix DB to be operational to start Zabbix server container"
        check_variables_postgresql
        check_db_connect_postgresql
        check_db_schema
    }

    wait_for_db_and_schema
{{- end }}
